#+OPTIONS: toc:nil num:nil
#+DATE: 05-21-22
#+AUTHOR: Eduardo Robles
#+TITLE: Securing SSH Keys with MFA

* About speaker
- Hi! I'm Eduardo Robles I work at the City of Pharr Innovation & Technlogy department as a Support Analyst.
- Since I was a kid technology was a passion of mine and I wanted to be an inventor.
- You can check out my skills over on my blog or LinkedIn. *Bonus, I give out a lot of free advice over there.*

* Securing SSH Keys with MFA
Main Topics:
1. Demonstrate how to implement MFA on SSH keys
2. Learn the benefits and downsides to MFA on SSH keys
3. Some tips/tricks for SSH management

* Before we begin...
- This talk is for an intermediate users
- OpenSSH version 8 or greater (both server and Client)

* Create SSH Key
** Create a "ed25519" key
#+BEGIN_SRC shell
ssh-keygen -t ed25519 -f ~/.ssh/nameofkey -N '' -C "comment goes here"
#+END_SRC
** Create an "RSA" key
#+BEGIN_SRC bash
ssh-keygen -t rsa -f ~/.ssh/nameofkey -N '' -C "comment goes here"
#+END_SRC
** Create a "ed25519-sk" key
#+BEGIN_SRC bash
ssh-keygen -t ed25519-sk -O resident -f ~/.ssh/id_testkey -N '' -C "test key for yubikey"
#+END_SRC
** Explanation
- -t option is for the type of keys to be created (ex. ed25519)
- -f option is the filename and location of the keys (ex. =/path/to/file=)
- -N is the passphrase to be given, leave blank for no passphrase
- -C enter a comment to best find keys later (ex. "github key")
- -o resident to tell OpenSSH to use the FIDO2 standard
* Demonstrating SSH Key Generation
** Example
#+BEGIN_EXAMPLE
Generating public/private ed25519-sk key pair.
You may need to touch your authenticator to authorize key generation.
Enter PIN for authenticator:
Your identification has been saved in /home/erobles/.ssh/id_testkey
Your public key has been saved in /home/erobles/.ssh/id_testkey.pub
The key fingerprint is:
SHA256:ItBm//lTC8cpH1ikTQMWfIdtO2PDEvzwFqp2XdzffPs test key for yubikey
The key's randomart image is:
+[ED25519-SK 256]-+
|         .++ o   |
|   .     .. X =  |
|  . +      * @ +.|
|   + .    . = @ +|
|    . o S  = * *o|
|     . o .* B . =|
|        o. B o  o|
|         .. o  . |
|          ..    E|
+----[SHA256]-----+
#+END_EXAMPLE
* How SSH Authentication Works
** SSH And Yubikey
- Magic of FIDO/U2F
https://www.openssh.com/txt/release-8.2
#+BEGIN_QUOTE
U2F/FIDO are open standards for inexpensive two-factor
authentication hardware that are widely used for website
authentication.  In OpenSSH FIDO devices are supported by new public
key types "ecdsa-sk" and "ed25519-sk", along with corresponding
certificate types.
#+END_QUOTE
- How FIDO Works
#+BEGIN_QUOTE
During registration with an online service, the user’s client device creates a new key pair. It retains the private key and registers the public key with the online service. Authentication is done by the client device proving possession of the private key to the service by signing a challenge. The client’s private keys can be used only after they are unlocked locally on the device by the user.
#+END_QUOTE
[[https://fidoalliance.org/wp-content/uploads/2014/12/graphic_Registration.png][Source: https://fidoalliance.org/how-fido-works/]]
* Adding SSH Key To Agent
*** Check if SSH Agent is running
This is to add the keys to the SSH Agent
#+BEGIN_SRC bash
eval "$(ssh-agent -s)"
#+END_SRC

*** Add the Keys to SSH Agent
#+BEGIN_SRC bash
ssh-add ~/.ssh/nameofkey
#+END_SRC

*** Verify Keys Added to SSH Agent
#+BEGIN_SRC bash
ssh-add -l
#+END_SRC

*** Copy Key to Remote Server
#+BEGIN_SRC bash
ssh-copy-id user@remote.server.location
#+END_SRC

*** Copy Server Key to Host
#+BEGIN_SRC bash
ssh-copy-id user@host.local
#+END_SRC

* SSH Config File - Make SSH Easier
Let's look at a typical SSH command.

=ssh erobles@10.0.3.11 -p 2300 -i ~/.ssh/mykeys=

*** =erobles@10.0.3.11= this states our username on the server and the IP/Hostname of the server

*** =-p 2300= the port we are connecting to on the server

*** =-i ~/.ssh/mykeys= the Public/Private keys used in the SSH connection
* SSH Config File cont.
While this is fine, it can be time consuming and easily forgotten. So let's see how this commands translates to an SSH Config file.

#+BEGIN_SRC bash
HOST myserver
HostName 10.0.3.11
User erobles
Port 2300
IdentityFile ~/.ssh/mykeys
#+END_SRC
