#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
#+REVEAL_THEME: beige
#+REVEAL_SLIDE:
#+REVEAL_TITLE_SLIDE: %t %a %e %https://eduardorobles.com
#+REVEAL_PLUGINS: (highlight)
#+REVEAL_HIGHLIGHT_CSS: monokai
#+OPTIONS: toc:nil num:nil
#+DATE: 05-21-22
#+AUTHOR: Eduardo Robles
#+TITLE: Securing SSH Keys with MFA

* About speaker
- Hi! I'm Eduardo Robles I work at the City of Pharr Innovation & Technlogy department as a Support Analyst.
- Since I was a kid technology was a passion of mine and I wanted to be an inventor.
- You can check out my skills over on my Youtube channel or my business blog. *Bonus, I give out a lot of free advice over there.*

* Securing SSH Keys with MFA
Main Topics:
1. Demonstrate how to implement MFA on SSH keys
2. Learn the benefits and downsides to MFA on SSH keys
3. Some tips/tricks for SSH management

* Create SSH Key
** Create a "ed25519" key
   #+BEGIN_SRC bash
ssh-keygen -t ed25519 -f ~/.ssh/nameofkey -N '' -C "comment goes here"
   #+END_SRC
** Create an "RSA" key
   #+BEGIN_SRC bash
   ssh-keygen -t rsa -f ~/.ssh/nameofkey -N '' -C "comment goes here"
   #+END_SRC
** Explanation
- -t option is for the type of keys to be created (ex. ed25519)
- -f option is the filename and location of the keys (ex. =/path/to/file=)
- -N is the passphrase to be given, leave blank for no passphrase
- -C enter a comment to best find keys later (ex. "github key")

* Demonstrating SSH Key Generation
* Adding SSH Key To Agent
*** Check if SSH Agent is running
   This is to add the keys to the SSH Agent
   #+BEGIN_SRC bash
   eval "$(ssh-agent -s)"
   #+END_SRC

*** Add the Keys to SSH Agent
   #+BEGIN_SRC bash
   ssh-add ~/.ssh/nameofkey
   #+END_SRC

*** Verify Keys Added to SSH Agent
   #+BEGIN_SRC bash
   ssh-add -l
   #+END_SRC

*** Copy Key to Remote Server
   #+BEGIN_SRC bash
   ssh-copy-id user@remote.server.location
   #+END_SRC

*** Copy Server Key to Host
#+BEGIN_SRC bash
ssh-copy-id user@host.local
#+END_SRC

* SSH Config File - Make SSH Easier
Let's look at a typical SSH command.

=ssh erobles@10.0.3.11 -p 2300 -i ~/.ssh/mykeys=

*** =erobles@10.0.3.11= this states our username on the server and the IP/Hostname of the server

*** =-p 2300= the port we are connecting to on the server

*** =-i ~/.ssh/mykeys= the Public/Private keys used in the SSH connection

While this is fine, it can be time consuming and easily forgotten. So let's see how this commands translates to an SSH Config file.

#+BEGIN_SRC bash
  HOST myserver
    HostName 10.0.3.11
    User erobles
    Port 2300
    IdentityFile ~/.ssh/mykeys
#+END_SRC
The example above achieves the same as the long SSH command in the previous example. You can save this file in =~/.ssh./= directory with the filename =ssh_config=. Once the file is saved you can type =ssh myserver=, OpenSSH will check the SSH config file for an entry =myserver= and execute an SSH connections with the options you specify. As you have more servers/machines you have to SSH into you simply add those the SSH config file. You can have 20, 40, or 100 connections all in one file! Working with an SSH Config file makes your SSH workflow much easier. It can also be helpful to keep track of SSH connectitons.
