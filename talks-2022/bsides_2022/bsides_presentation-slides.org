#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
#+REVEAL_THEME: white
#+OPTIONS: toc:nil num:nil
#+DATE: 05-21-22
#+AUTHOR: Eduardo Robles
#+TITLE: Securing SSH Keys with MFA
* BSIDESRGV 2022
#+BEGIN_EXAMPLE
    ____ _____ ________  ___________ ____  _______    __   ___   ____ ___  ___
   / __ ) ___//  _/ __ \/ ____/ ___// __ \/ ____/ |  / /  |__ \ / __ \__ \|__ \
  / __  \__ \ / // / / / __/  \__ \/ /_/ / / __ | | / /   __/ // / / /_/ /__/ /
 / /_/ /__/ // // /_/ / /___ ___/ / _, _/ /_/ / | |/ /   / __// /_/ / __// __/
/_____/____/___/_____/_____//____/_/ |_|\____/  |___/   /____/\____/____/____/

#+END_EXAMPLE

#+BEGIN_CENTER
SECURING SSH KEYS WITH MFA
BY
EDUARDO ROBLES
#+END_CENTER
* About speaker
- Hi! I'm Eduardo Robles I work at the City of Pharr Innovation & Technology department as a Support Analyst.
- Recent graduate in Cybersecurity.
- I am the founder of the South Texas Linux Users Group.
- You can check out my skills over on my blog or LinkedIn. *Bonus, I give out a lot of free advice over there.*

* Securing SSH Keys with MFA
Main Topics:
1. Learn the basics of SSH key authentication
2. Demonstrate how to implement MFA on SSH keys
3. Learn the benefits and downsides to MFA on SSH keys
4. Some tips/tricks for SSH management

* Before we begin...
- This talk is for an intermediate users
- OpenSSH version 8 or greater (both server and Client)
- This presentation is Linux/Unix heavy
- OpenSSH is available on latest Windows builds but your mileage may vary (try WSL?)

* What inspired this talk?
- A project, a raspberry pi, and ssh proxies.

* How SSH Authentication Works
** Keys, Keys, and more Keys!
SSH employs *Public Key* authentication, meaning all cryptography functions are done asymmetrically.
[[https://www.digitalocean.com/community/tutorials/understanding-the-ssh-encryption-and-connection-process][DigitalOcean - Understanding the SSH Encryption and Connection Process]]

#+BEGIN_QUOTE
The more well-discussed use of asymmetrical encryption with SSH comes from SSH key-based authentication. SSH key pairs can be used to authenticate a client to a server. The client creates a key pair and then uploads the public key to any remote server it wishes to access. This is placed in a file called authorized_keys within the ~/.ssh directory in the user account’s home directory on the remote server.
#+END_QUOTE
** Public and Private Key Cryptography
[[https://commons.wikimedia.org/wiki/File:Public-key-crypto-1.svg#/media/File:Public-key-crypto-1.svg][Source: Wikipedia - Public-key cryptography]]
** SSH And Yubikey
- Magic of FIDO/U2F
https://www.openssh.com/txt/release-8.2
#+BEGIN_QUOTE
U2F/FIDO are open standards for inexpensive two-factor authentication hardware that are widely used for website authentication. In OpenSSH FIDO devices are supported by new public key types "ecdsa-sk" and "ed25519-sk", along with corresponding certificate types.
#+END_QUOTE
- How FIDO Works
#+BEGIN_QUOTE
During registration with an online service, the user’s client device creates a new key pair. It retains the private key and registers the public key with the online service. Authentication is done by the client device proving possession of the private key to the service by signing a challenge. The client’s private keys can be used only after they are unlocked locally on the device by the user.
#+END_QUOTE
[[https://fidoalliance.org/wp-content/uploads/2014/12/graphic_Registration.png][Source: https://fidoalliance.org/how-fido-works/]]
** SSH and TOTP
- Once upon a time
  Time based One Time Passcode or TOTP for short is a method of securing authentication with short random codes. Codes are generated by an app or service like Google Authenticator or Microsoft Authenticator. You may be most familiar with using MFA app for your email or bank sign-on.
* Create SSH Key
** Create a "ed25519" key
#+BEGIN_SRC shell
ssh-keygen -t ed25519-sk -f ~/.ssh/id_testkey -N '' -C "comment goes here"
#+END_SRC
** Explanation
- -t option is for the type of keys to be created (ex. ed25519)
- -f option is the file-name and location of the keys (ex. =/path/to/file=)
- -N is the passphrase to be given, leave blank for no passphrase
- -C enter a comment to best find keys later (ex. "github key")
** Passwords, Passphrase, Passcode???
- Password are usually for authenticating a user to a system
- Passphrases are used for SSH keys to lock/unlock the actual keys
- Passcode is usually a time based one time code used to secure an account with MFA
** Create an SSH with TOTP
*** TOTP with Google Authenticator
#+BEGIN_SRC bash
sudo apt install libpam-google-authenticator -y
#+END_SRC
*** Configure TOTP Service
#+BEGIN_SRC bash
google-authenticator
#+END_SRC
- You will need to answer the following questions to your needs.
*** Scan QR Code from Google Authenticator
*** Edit SSH Service
**** Edit =/etc/pam.d/sshd= add to end of file
=auth required pam_google_athenticator.so=
**** Edit =/etc/ssh/sshd_config= change the following
#+BEGIN_SRC bash
ChallengeResponseAuthentication yes
UsePAM yes
#+END_SRC
**** Restart SSH Service
=sudo systemctl restart sshd=
* MFA is awesome!
Multifactor authentications is great and when implemented correctly can help secure your environments. It can help ensure that you trust who is logging into your services. And ultimately can help in preventing costly security breaches.
* Watch out for these things...
- Poorly setup MFA environments
  Adding to much complexity to MFA environments is not safer and does not increase security.
- Confusing roll-out
  Think of your users and chose the best path with the least resistance.
- Hostile users
- ADA and Accessibility Issues
  Can users with disabilities uses your MFA?
* Tips and Tricks
** Adding SSH Key To Agent
*** Check if SSH Agent is running
This is to add the keys to the SSH Agent
#+BEGIN_SRC bash
eval "$(ssh-agent -s)"
#+END_SRC

*** Add the Keys to SSH Agent
#+BEGIN_SRC bash
ssh-add ~/.ssh/nameofkey
#+END_SRC
If you add your public key, OpenSSH will warn you to not use the public key.
*** Verify Keys Added to SSH Agent
#+BEGIN_SRC bash
ssh-add -l
#+END_SRC

*** Copy Key to Remote Server
#+BEGIN_SRC bash
ssh-copy-id -i ~/.ssh/testkey.pub user@remote.server.location
#+END_SRC
Remember that you want to share your public key. Never share your Private Key!
** SSH Config File - Make SSH Easier
Let's look at a typical SSH command.

=ssh erobles@10.0.3.11 -p 2300 -i ~/.ssh/mykeys=

*** =erobles@10.0.3.11= this states our username on the server and the IP/Hostname of the server

*** =-p 2300= the port we are connecting to on the server

*** =-i ~/.ssh/mykeys= the Public/Private keys used in the SSH connection
** SSH Config File cont.
While this is fine, it can be time consuming and easily forgotten. So let's see how this commands translates to an SSH Config file.

#+BEGIN_SRC bash
HOST myserver
HostName 10.0.3.11
User erobles
Port 2300
IdentityFile ~/.ssh/mykeys
#+END_SRC
* Conclusion
- I've shown how to add an extra layer of security to your SSH Keys with MFA
- Find a good balance between ease of use and security
- There is so much to OpenSSH, check out the documentation
- If this doesn't work maybe give SSH Certificates a try?
* Thanks!
#+BEGIN_EXAMPLE
  ________  _____    _   ____ _______    ____ _____ ________  ___________
 /_  __/ / / /   |  / | / / //_/ ___/   / __ ) ___//  _/ __ \/ ____/ ___/
  / / / /_/ / /| | /  |/ / ,<  \__ \   / __  \__ \ / // / / / __/  \__ \
 / / / __  / ___ |/ /|  / /| |___/ /  / /_/ /__/ // // /_/ / /___ ___/ /
/_/ /_/ /_/_/  |_/_/ |_/_/ |_/____/  /_____/____/___/_____/_____//____/

#+END_EXAMPLE
